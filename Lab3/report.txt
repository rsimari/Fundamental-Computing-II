Lab3 Report
============

These programs from the users experience arent all that interesting. Once the executables are ran they will display information about the classes and how they are intherited. The information displayed shows the values of the classes. Internally these programs use class inheritence, polymorphism, and composition. The programs internally are much more interesting since they use these programming methods. For inheritence I have three classes, one top level class and two classes that inherit the public properties of the top level class. The driver program sort of shows the results of this inheritence by displaying variables. The ones that are the same in the two classes are inherited from the top level class and the ones that are diffeerent are unique to that class. With polymorphism, it uses one instance of the top level classes and uses polymorphic nature to show the properties of each lower level class. I verified these results by checking that each value for each variable is properly inherited and represented in the driver program. I double checked that each one properly represents its role in inheritence, polymorphism, and composition. 

Composition vs. Inheritence:
	I think inheritence is more natural for me because I usually try to use virtual functions and polymorphism when they are useful. When I am reading code, I think inheritence is much more obvious what the intention of the class is doing because when you declare the class you declare it as inheriting a super class. I do think composition is useful at times but to me inheritence is more intuitive and natural.

When making the base classes I tried to think of properties or functions that all Packages or Bank Accounts have. For instance, all packages have a weight and a destination and all Bank Accounts have an owner will a name and phone number. Then in the derived classes the variables that are unique to these classes should be specific attributes that make it unique. So when I made the specific types of packages I edited the calculateCost() function to give additional costs for either per/ounce or extra flat rates to add to the cost. In my driver funciton I printed the sub class using their unique print() functions. This shows the weight and the cost. The weight is inherited from the Package class and the calculateCost() is different for each sub class. The different cost values and same weight represents how the class was inherited but also has unique properties. 
